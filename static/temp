/** =======================
 *  CONFIGURATION (update)
 *  ======================= */
const CONFIG = {
  SHEET_ID: '1-hjgnAqftqKjvFv8fU4mFt8OsAN8CJrBlFOqAcrs7ws', // your Spreadsheet ID
  SHEET_NAME: 'Submissions',            // Tab name
  ENABLE_EMAIL: true,                   // send email notifications
  EMAIL_TO: 'beta@aanihub.com',         // notification recipient
  EMAIL_SUBJECT: 'New Aani Beta Waitlist Submission',
  HONEYPOT_FIELD: '_gotcha',
  MIN_SUBMIT_MS: 1500,                  // <1.5s looks botty
  HMAC_SECRET: '',                      // optional: add if you want signed metadata
  // Only accept posts that originate from your live site(s)
  ALLOWED_HOSTNAMES: ['aanihub.com', 'www.aanihub.com'] // add your Squarespace subdomain if needed
};

/** Ensure header row exists */
function getSheet_() {
  const ss = SpreadsheetApp.openById(CONFIG.SHEET_ID);
  const sh = ss.getSheetByName(CONFIG.SHEET_NAME) || ss.insertSheet(CONFIG.SHEET_NAME);
  if (sh.getLastRow() === 0) {
    sh.appendRow([
      'timestamp','name','email','message',
      'ip','geo_city','geo_region','geo_country','geo_lat','geo_lon',
      'url','referrer','userAgent','language','timezone',
      'utm_source','utm_medium','utm_campaign','utm_term','utm_content',
      'screen_w','screen_h','device_pixel_ratio',
      'submit_ms','honeypot_tripped','hmac_valid','origin_host','raw_meta_json'
    ]);
  }
  return sh;
}

function doGet(e) {
  return ContentService
    .createTextOutput(JSON.stringify({ ok: true }))
    .setMimeType(ContentService.MimeType.JSON);
}

function doPost(e) {
  try {
    const payload = parseRequest_(e);            // {fields, meta, control}
    const spam = evaluateSpam_(payload);         // flags
    const row = buildRow_(payload, spam);
    const sh = getSheet_();
    sh.appendRow(row);

    if (CONFIG.ENABLE_EMAIL) emailSubmission_(payload, spam);

    // Redirect (Squarespace thank-you page)
    const redirect = payload.control._redirect || payload.control._next;
    if (redirect) {
      const html = HtmlService.createHtmlOutput(
        `<html><head><meta http-equiv="refresh" content="0; url='${escapeHtml_(redirect)}'"></head>
         <body>Redirectingâ€¦</body></html>`);
      return html;
    }

    return ContentService
      .createTextOutput(JSON.stringify({ ok: true }))
      .setMimeType(ContentService.MimeType.JSON);

  } catch (err) {
    console.error(err);
    return ContentService
      .createTextOutput(JSON.stringify({ ok: false, error: String(err) }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/** Parse URL-encoded or JSON body into normalized structure */
function parseRequest_(e) {
  const type = (e.postData && e.postData.type) || '';
  let data = {};
  if (/application\/json/i.test(type)) {
    data = JSON.parse(e.postData.contents || '{}');
  } else {
    data = Object.assign({}, e.parameter || {}); // form fields
  }

  // Control fields (prefixed with _)
  const control = {
    _next: data._next,
    _redirect: data._redirect,
    _gotcha: data[CONFIG.HONEYPOT_FIELD],
    _submit_ms: Number(data._submit_ms || 0),
    _sig: data._sig || '',
    _origin: data._origin || data._meta_url || ''
  };

  // Metadata from flat field names
  const meta = {
    ip: data.ip || '',
    url: data._meta_url || '',
    referrer: data._meta_referrer || '',
    userAgent: data._meta_userAgent || '',
    language: data._meta_language || '',
    timezone: data._meta_timezone || '',
    screen: {
      w: data._meta_screen_w || '',
      h: data._meta_screen_h || '',
      dpr: data._meta_screen_dpr || ''
    },
    geo: {
      city: data._geo_city || '',
      region: data._geo_region || '',
      country: data._geo_country || '',
      lat: data._geo_lat || '',
      lon: data._geo_lon || ''
    }
  };

  // Extract UTM from URL
  meta.utm = extractUtmFromUrl_(meta.url);

  // Remove control/meta keys to obtain user fields
  const removeKeys = new Set([
    '_next','_redirect',CONFIG.HONEYPOT_FIELD,'_submit_ms','_sig','_origin',
    '_meta_url','_meta_referrer','_meta_userAgent','_meta_language','_meta_timezone',
    '_meta_screen_w','_meta_screen_h','_meta_screen_dpr',
    '_geo_city','_geo_region','_geo_country','_geo_lat','_geo_lon',
    'ip'
  ]);
  const fields = {};
  Object.keys(data).forEach(k => { if (!removeKeys.has(k)) fields[k] = data[k]; });

  return { fields, meta, control };
}

/** Spam evaluation */
function evaluateSpam_({meta, control}) {
  const honeypot = !!control._gotcha;
  const tooFast = control._submit_ms > 0 && control._submit_ms < CONFIG.MIN_SUBMIT_MS;
  const originHost = hostFromUrl_(control._origin);
  const badOrigin = CONFIG.ALLOWED_HOSTNAMES.length > 0 &&
                    originHost &&
                    CONFIG.ALLOWED_HOSTNAMES.indexOf(originHost) === -1;
  const hmacValid = validateHmac_(meta, control);
  return { honeypot, tooFast, badOrigin, hmacValid, originHost };
}

/** Optional HMAC (binds key meta fields to request) */
function validateHmac_(meta, control) {
  if (!CONFIG.HMAC_SECRET) return true;
  const signature = control._sig || '';
  const base = JSON.stringify({
    url: meta.url || '',
    referrer: meta.referrer || '',
    ip: meta.ip || '',
    userAgent: meta.userAgent || ''
  });
  const expected = Utilities.computeHmacSha256Signature(base, CONFIG.HMAC_SECRET);
  const expectedHex = expected.map(b => ('0' + (b & 0xFF).toString(16)).slice(-2)).join('');
  return signature.toLowerCase() === expectedHex.toLowerCase();
}

/** Build row for Sheet */
function buildRow_({fields, meta, control}, spam) {
  const u = meta.utm || {};
  const sc = meta.screen || {};
  const g = meta.geo || {};
  return [
    new Date(),
    fields.name || '',
    fields.email || '',
    fields.message || '',
    meta.ip || '',
    g.city || '',
    g.region || '',
    g.country || '',
    g.lat || '',
    g.lon || '',
    meta.url || '',
    meta.referrer || '',
    meta.userAgent || '',
    meta.language || '',
    meta.timezone || '',
    u.utm_source || '',
    u.utm_medium || '',
    u.utm_campaign || '',
    u.utm_term || '',
    u.utm_content || '',
    sc.w || '',
    sc.h || '',
    sc.dpr || '',
    control._submit_ms || '',
    spam.honeypot ? 'yes' : 'no',
    spam.hmacValid ? 'yes' : 'no',
    spam.originHost || '',
    JSON.stringify({ fields, meta, control, spam })
  ];
}

/** Optional email */
function emailSubmission_({fields, meta, control}, spam) {
  const html = `
    <h3>New form submission</h3>
    <p><b>Name:</b> ${escapeHtml_(fields.name || '')}</p>
    <p><b>Email:</b> ${escapeHtml_(fields.email || '')}</p>
    <p><b>Message:</b><br>${escapeHtml_((fields.message || '')).replace(/\n/g,'<br>')}</p>
    <hr>
    <p><b>IP:</b> ${escapeHtml_(meta.ip || '')}</p>
    <p><b>Geo:</b> ${escapeHtml_(JSON.stringify(meta.geo || {}))}</p>
    <p><b>Referrer:</b> ${escapeHtml_(meta.referrer || '')}</p>
    <p><b>URL:</b> ${escapeHtml_(meta.url || '')}</p>
    <p><b>User-Agent:</b> ${escapeHtml_(meta.userAgent || '')}</p>
    <p><b>Language:</b> ${escapeHtml_(meta.language || '')}</p>
    <p><b>Timezone:</b> ${escapeHtml_(meta.timezone || '')}</p>
    <p><b>UTM:</b> ${escapeHtml_(JSON.stringify(meta.utm || {}))}</p>
    <p><b>Screen:</b> ${escapeHtml_(JSON.stringify(meta.screen || {}))}</p>
    <p><b>Submit ms:</b> ${escapeHtml_(String(control._submit_ms || ''))}</p>
    <p><b>Spam flags:</b> ${escapeHtml_(JSON.stringify(spam))}</p>
  `;
  MailApp.sendEmail({
    to: CONFIG.EMAIL_TO,
    subject: CONFIG.EMAIL_SUBJECT,
    htmlBody: html
  });
}

/** Helpers */
function hostFromUrl_(u) { try { return new URL(u).hostname; } catch (_) { return ''; } }
function extractUtmFromUrl_(u) {
  try {
    const p = new URL(u).searchParams;
    return {
      utm_source: p.get('utm_source') || '',
      utm_medium: p.get('utm_medium') || '',
      utm_campaign: p.get('utm_campaign') || '',
      utm_term: p.get('utm_term') || '',
      utm_content: p.get('utm_content') || ''
    };
  } catch (_) { return {}; }
}
function escapeHtml_(s) {
  return String(s).replace(/[&<>"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c]));
}